#!/bin/bash

# Email Notification System for Server Reports
# Sends email alerts when thresholds are exceeded

# Email configuration (can be overridden in config.ini)
EMAIL_ENABLED=false
SMTP_SERVER="localhost"
SMTP_PORT="587"
SMTP_USER=""
SMTP_PASS=""
FROM_EMAIL="server-monitor@$(hostname)"
TO_EMAIL=""
EMAIL_SUBJECT="Server Alert - $(hostname)"

send_email_alert() {
    local alert_type="$1"
    local message="$2"
    local priority="$3"
    
    if [ "$EMAIL_ENABLED" != "true" ]; then
        return 0
    fi
    
    if [ -z "$TO_EMAIL" ]; then
        echo -e "${YELLOW}Email notifications enabled but no recipient configured${NC}"
        return 1
    fi
    
    local email_body="
Subject: $EMAIL_SUBJECT - $alert_type
From: $FROM_EMAIL
To: $TO_EMAIL
MIME-Version: 1.0
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: #3498db; color: white; padding: 20px; border-radius: 5px; }
        .alert { padding: 15px; margin: 10px 0; border-radius: 5px; }
        .alert-warning { background: #fff3cd; border-left: 4px solid #ffc107; }
        .alert-critical { background: #f8d7da; border-left: 4px solid #dc3545; }
        .info { background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 10px 0; }
        .footer { color: #666; font-size: 12px; margin-top: 30px; }
    </style>
</head>
<body>
    <div class='header'>
        <h2>üö® Server Alert Notification</h2>
        <p>Hostname: $(hostname)</p>
        <p>Time: $(date)</p>
    </div>
    
    <div class='alert alert-$priority'>
        <h3>$alert_type Alert</h3>
        <p>$message</p>
    </div>
    
    <div class='info'>
        <h4>System Summary:</h4>
        <ul>
            <li>CPU Usage: $(get_cpu_usage 2>/dev/null || echo "N/A")</li>
            <li>Memory Usage: $(get_memory_percentage 2>/dev/null || echo "N/A")%</li>
            <li>Disk Usage: $(get_disk_percentage 2>/dev/null || echo "N/A")%</li>
            <li>Load Average: $(get_load_average 2>/dev/null || echo "N/A")</li>
        </ul>
    </div>
    
    <div class='footer'>
        <p>This alert was generated by the Advanced Server Information Report Tool</p>
        <p>Report ID: $(date +%s)</p>
    </div>
</body>
</html>
"

    # Try to send email using available methods
    if command -v sendmail &>/dev/null; then
        echo "$email_body" | sendmail "$TO_EMAIL"
        echo -e "${GREEN}Alert email sent via sendmail${NC}"
    elif command -v mail &>/dev/null; then
        echo "$email_body" | mail -s "$EMAIL_SUBJECT - $alert_type" "$TO_EMAIL"
        echo -e "${GREEN}Alert email sent via mail${NC}"
    elif command -v curl &>/dev/null && [ -n "$SMTP_SERVER" ]; then
        # Use curl for SMTP (requires proper configuration)
        local temp_file="/tmp/email_$$.txt"
        echo "$email_body" > "$temp_file"
        
        curl --url "smtp://$SMTP_SERVER:$SMTP_PORT" \
             --ssl-reqd \
             --mail-from "$FROM_EMAIL" \
             --mail-rcpt "$TO_EMAIL" \
             --upload-file "$temp_file" \
             --user "$SMTP_USER:$SMTP_PASS" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}Alert email sent via SMTP${NC}"
        else
            echo -e "${RED}Failed to send email via SMTP${NC}"
        fi
        
        rm -f "$temp_file"
    else
        echo -e "${YELLOW}No email sending method available${NC}"
        log_message "Email notification failed - no sending method available" "ERROR"
        return 1
    fi
    
    log_message "Email alert sent: $alert_type - $message" "INFO"
}

check_and_alert() {
    local metric="$1"
    local current_value="$2"
    local threshold="$3"
    local unit="${4:-%}"
    
    if [ -z "$current_value" ] || [ "$current_value" = "N/A" ]; then
        return 0
    fi
    
    # Remove any non-numeric characters for comparison
    local numeric_value=$(echo "$current_value" | grep -oE '[0-9]+\.?[0-9]*' | head -1)
    
    if [ -n "$numeric_value" ] && command -v bc &>/dev/null; then
        if (( $(echo "$numeric_value > $threshold" | bc -l) )); then
            local priority="warning"
            if (( $(echo "$numeric_value > ($threshold + 10)" | bc -l) )); then
                priority="critical"
            fi
            
            send_email_alert "$metric Alert" \
                "$metric is at ${current_value}${unit}, which exceeds the threshold of ${threshold}${unit}" \
                "$priority"
        fi
    fi
}

send_daily_report() {
    if [ "$EMAIL_ENABLED" != "true" ] || [ -z "$TO_EMAIL" ]; then
        return 0
    fi
    
    local report_file="/tmp/daily_report_$(date +%Y%m%d).html"
    
    # Generate HTML report
    generate_html_report "$report_file"
    
    local email_body="
Subject: Daily Server Report - $(hostname)
From: $FROM_EMAIL
To: $TO_EMAIL
MIME-Version: 1.0
Content-Type: text/html; charset=UTF-8

$(cat "$report_file")
"

    # Send the report
    if command -v sendmail &>/dev/null; then
        echo "$email_body" | sendmail "$TO_EMAIL"
        echo -e "${GREEN}Daily report email sent${NC}"
    elif command -v mail &>/dev/null; then
        mail -s "Daily Server Report - $(hostname)" -a "Content-Type: text/html" "$TO_EMAIL" < "$report_file"
        echo -e "${GREEN}Daily report email sent${NC}"
    fi
    
    rm -f "$report_file"
    log_message "Daily report email sent to $TO_EMAIL" "INFO"
}

load_email_config() {
    if [ -f "$CONFIG_FILE" ]; then
        # Source email configuration from config file
        EMAIL_ENABLED=$(grep "^email_enabled=" "$CONFIG_FILE" 2>/dev/null | cut -d'=' -f2 | tr -d ' ')
        SMTP_SERVER=$(grep "^smtp_server=" "$CONFIG_FILE" 2>/dev/null | cut -d'=' -f2 | tr -d ' ')
        SMTP_PORT=$(grep "^smtp_port=" "$CONFIG_FILE" 2>/dev/null | cut -d'=' -f2 | tr -d ' ')
        SMTP_USER=$(grep "^smtp_user=" "$CONFIG_FILE" 2>/dev/null | cut -d'=' -f2 | tr -d ' ')
        TO_EMAIL=$(grep "^to_email=" "$CONFIG_FILE" 2>/dev/null | cut -d'=' -f2 | tr -d ' ')
    fi
}

test_email_config() {
    echo -e "${BLUE}${BOLD}üìß Testing Email Configuration:${NC}"
    
    load_email_config
    
    if [ "$EMAIL_ENABLED" = "true" ]; then
        echo -e "${GREEN}‚úì Email notifications enabled${NC}"
        echo -e "${CYAN}SMTP Server: $SMTP_SERVER:$SMTP_PORT${NC}"
        echo -e "${CYAN}Recipient: $TO_EMAIL${NC}"
        
        if [ -n "$TO_EMAIL" ]; then
            echo -e "${YELLOW}Sending test email...${NC}"
            send_email_alert "Test Alert" "This is a test email from the server monitoring system." "warning"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  No recipient email configured${NC}"
        fi
    else
        echo -e "${YELLOW}Email notifications disabled${NC}"
    fi
}
